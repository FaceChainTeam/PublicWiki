openapi: 3.0.0
info:
  title: Открытое API Ovision
  description:
    Данное API предназначено для подключения СКУД систем к терминалу устройств
    O.Gate через открытый протокол openapi-3.0.0
  version: 1.0.0
servers:
  - url: http://localhost/
tags:
  - name: Управление пользователями
    description: Методы для работы с пользователями
  - name: Управление группами доступа 
    description: Методы для работы с группами доступа
  - name: Управление устройствами
    description: Методы для работы с устройствами
paths:
  /api/subdivision/add:
    post:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Добавление группы доступа
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SubdivisionItem"
        required: false
      responses:
        200:
          description: Group list response!
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/SubdivisionItem"
                  status:
                    type: string
                    example: success
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/subdivision/ext/{external_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Получить группу по external_id
      description: Метод запрашивает группу доступа по external_ID
      parameters:
        - name: external_id
          in: path
          description: идентификатор группы доступа
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ответ сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubdivisionItem"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Обновить группу доступа по external_id
      description: Обновить данные группы доступа по external_ID
      parameters:
        - name: external_id
          in: path
          description: идентификатор группы доступа
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SubdivisionItem"
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Удалить группу по external_id
      parameters:
        - name: external_id
          in: path
          description: внешний идентификатор группы доступа
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/subdivision/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Получить группу по ID
      description: Метод запрашивает группу доступа по ID
      parameters:
        - name: id
          in: path
          description: идентификатор группы доступа
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ответ сервера
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubdivisionItem"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Обновить группу доступа
      description: Обновить данные группы доступа по ID
      parameters:
        - name: id
          in: path
          description: идентификатор группы доступа
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/SubdivisionItem"
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - Управление группами доступа
      summary: Удалить группу по id
      parameters:
        - name: id
          in: path
          description: идентификатор группы доступа
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/subdivisions:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Список групп доступа
      description: Метод возвращает список групп доступа
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SubdivisionItem"
                  status:
                    type: string
                    example: success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/subdivisions/ids:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление группами доступа
      summary: Получить список ID групп
      description: Получить список внутренних и внешних ID групп доступа
      responses:
        200:
          description: Group list response!
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SubdivisionIds"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/users:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Список пользователей
      description: Возвращает список зарегистрированных пользователей.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Users"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content: {}
  /api/user/add:
    post:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Добавление пользователя
      description: Добавление нового пользователя
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ItemUserIn"
        required: false
      responses:
        200:
          description: User response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemUserOut"
        400:
          description: Ошибка структура данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: Не найден пользователь в базе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/ext/{external_id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Получить пользователя по external_id
      description:
        Метод возвращает все параметры выбранного по внешниму external_id
        пользователя
      parameters:
        - name: external_id
          in: path
          description: внешний идентификатор пользователя - external_id
          required: true
          schema:
            type: string
      responses:
        200:
          description: User response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemUserOut"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Обновить пользователя по external_id
      description: Обновить данные пользователя по external_id
      parameters:
        - name: external_id
          in: path
          description: внешний идентификатор пользователя - external_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ItemUserIn"
        required: false
      responses:
        200:
          description: User response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        400:
          description: Неверная структура данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: Не найден пользователь в базе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Удалить пользователя по external_id
      parameters:
        - name: external_id
          in: path
          description: внешний идентификатор пользователя - external_id
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /api/user/ext/{external_id}/check:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Проверить пользователя
      description: Метод проверяет существование пользователя с внешним extID
      parameters:
        - name: external_id
          in: path
          description: внешний идентификатор пользователя - external_id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Check response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/user/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Получить пользователя
      description: Метод возвращает все параметры выбранного по ID пользователя
      parameters:
        - name: id
          in: path
          description: ID of user to fetch
          required: true
          schema:
            type: integer
            format: int64,
      responses:
        200:
          description: User response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemUserOut"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Обновить пользователя
      description: Обновить данные пользователя по ID
      parameters:
        - name: id
          in: path
          description: идентификатор группы доступа
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/ItemUserIn"
        required: false
      responses:
        200:
          description: User response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        400:
          description: Ошибка структура данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: Не найден пользователь в базе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Удалить пользователя
      description: удаление пользователя по ID
      parameters:
        - name: id
          in: path
          description: идентификатор группы доступа
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/users/ids:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление пользователями
      summary: Получить список ID пользователей
      description: Получить список внутренних и внешних ID пользователей
      responses:
        200:
          description: Group list response!
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/UsersIds"
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/devices:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление устройствами
      summary: Список устройств
      description: Метод возвращает список активных устройств
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: "#/components/schemas/Device"
                    status:
                      type: string
                      example: success
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/device/{id}:
    put:
      security:
        - bearerAuth: []
      tags:
        - Управление устройствами
      summary: Обновить устройство
      description: Обновить данные устройства по ID
      parameters:
        - name: id
          in: path
          description: идентификатор устройства
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/Device"
        required: false
      responses:
        200:
          description: Device response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/device/{id}/state:
    get:
      security:
        - bearerAuth: []
      tags:
        - Управление устройствами
      summary: Получить текущее состояние устройства (активно / неактивно)
      description: Получить текущее состояние устройства по ID
      parameters:
        - name: id
          in: path
          description: идентификатор устройства
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Device response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/State"
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      security:
        - bearerAuth: []
      tags:
        - Управление устройствами
      summary: Изменить состояние устройства (активно / неактивно)
      description: Изменить состояние устройства по ID устройства
      parameters:
        - name: id
          in: path
          description: идентификатор устройства
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/State"
        required: false
      responses:
        200:
          description: Device response!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  schemas:
    State:
      type: object
      properties:
        state:
          type: string
          enum:
            - on
            - off
          example: "on"
    AccessCards:
      type: object
      properties:
        active:
          type: boolean
          description: Признак активности карты
          example: true
        expire_date:
          type: string
          description: Дата завершения обслуживания
          example: 2026-01-01
        id:
          type: integer
          example: 1
        name:
          type: string
          description: Наименование карты
          example: "12341234"
        number:
          type: string
          description:
            Номер карты (десятичном, HEX) форматах, взависимости от типа
            карты
          example: "12341234"
        type_card:
          type: string
          description: Тип карты
          example: WD26
    AccessItem:
      type: object
      properties:
        access:
          type: string
          description: Строка JSON - временя доступа
          example:
            '{ "full_access": false, "weekdays": "1111100", "date_from": "2020-12-01",
            "date_to": "2021-01-01", "time_from": "08:00", "time_to": "18:00" }'
        external_id:
          type: string
          description: Внешний ID группы доступа
          example: "1"
        id:
          type: integer
          description: ID группы доступа
          example: 1
    Error:
      required:
        - message
        - success
      type: object
      properties:
        message:
          type: string
          example: Error message
        success:
          type: boolean
          example: false
    AuthUser:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "Админ"
        last_name:
          type: string
        middle_name:
          type: string
        type_user:
          type: string
          example: "admin"
        photo:
          type: string
        roles:
          type: array
          items:
            type: string
            example: "add"
        zones:
          type: array
          items:
            type: integer
            example: 1
    SuccessToken:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9........Q1CRk7YTR3_W2m6yTjnzljUhUDh8IYo-Jb1Gm7lf2Pk"
    Users:
      required:
        - first_name
      type: object
      properties:
        id:
          type: integer
          example: 1
        external_id:
          type: string
          example: "1"
        first_name:
          type: string
          example: Ivan
        last_name:
          type: string
          example: Ivanov
        middle_name:
          type: string
          example: Ivanovich
        photo:
          type: string
          example: "user_tyt5yt2uy5uy5525uy6576677.jpg"
        blacklisted:
          type: boolean
          description: Пользователь в черном списке
          example: false
        blocked:
          type: boolean
          description: Блокировка пользователя
          example: false
        type_user:
          type: string
          example: employee
    ItemUser:
      type: object
      properties:
        blacklisted:
          type: boolean
          description: Пользователь в черном списке
          example: false
        blocked:
          type: boolean
          description: Блокировка пользователя
          example: false
        created_at:
          type: string
          description: Дата и время добавления записи
          example: 2020-03-17 12:45:56
        id:
          type: integer
          example: 1
        photo:
          type: string
          description: Имя файла фото пользователя
          example: user_tyt5yt2uy5uy5525uy6576677.jpg
        schema:
          $ref: "#/components/schemas/UserBase"
        updated_at:
          type: string
          description: Дата и время изменения записи
          example: 2020-03-17 12:45:56
    ItemUserIn:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            access:
              type: array
              description: Список подключенных групп доступа (не обязательно)
              items:
                $ref: "#/components/schemas/AccessItem"
            cards:
              type: array
              description: Список карт доступа
              items:
                $ref: "#/components/schemas/AccessCards"
            data:
              type: string
              description: Доболнительные поля с формате JSON строки
              example: "{}"
            photo_encrypted:
              type: string
              description:
                Если нет photo_url используется строка кодированная BASE64
                содержащая код изображения
              example: <base64>
            photo_url:
              type: string
              description: URL фото пользователя
              example: ""
            subdivisions:
              type: array
              description: Альтернативный список групп доступа (только ID)
              items:
                type: integer
                example: 2
    ItemUserOut:
      allOf:
        - $ref: "#/components/schemas/UserBase"
        - type: object
          properties:
            cards:
              type: array
              description: Список карт пользовыателя
              items:
                $ref: "#/components/schemas/AccessCards"
            created_at:
              type: string
              description: Дата и время добавления записи
              example: 2020-03-17 12:45:56
            data:
              type: string
              description: Доболнительные поля с формате JSON строки
              example: '{ "docum": "23423423432"}'
            deleted:
              type: boolean
              description: Пользователь помечан на удаление
              example: false
            id:
              type: integer
              example: 1
            is_twin:
              type: boolean
              description: Ключ для определения двойников
              example: false
            on_object:
              type: boolean
              description: Имеются ли у пользователя визиты
            photo:
              type: string
              description: Имя файла фото пользователя
              example: user_tyt5yt2uy5uy5525uy6576677.jpg
            photo_encrypted:
              type: string
              description:
                Если нет photo_url используется строка кодированная BASE64
                содержащая код изображения
              example: <BASE64>
            subdivisions:
              type: array
              description: Список подключенных групп доступа
              items:
                $ref: "#/components/schemas/AccessItem"
            updated_at:
              type: string
              description: Дата и время изменения записи
              example: "2020-03-17 12:45:56"
    # OutVisits:
    #   type: object
    #   properties:
    #     visits:
    #       type: array
    #       items:
    #         $ref: "#/components/schemas/OutAllVisit"
    #     days:
    #       type: array
    #       items:
    #         $ref: "#/components/schemas/OutDaysVisit"
    #     total:
    #       type: string
    #       example: "20:34"
    # OutAllVisit:
    #   type: object
    #   properties:
    #     day:
    #       type: string
    #       example: "2021-01-13"
    #     purpose:
    #       type: string
    #       example: "exit"
    #     time_purpose:
    #       type: string
    #       example: "16:08"
    #     data:
    #       type: string
    #       example: '{"zone": "terminal", "device_name": "guard-1", "temperature": 0}'
    # OutDaysVisit:
    #   type: object
    #   properties:
    #     day:
    #       type: string
    #       example: "2021-01-13"
    #     first_entering:
    #       type: string
    #       example: "19:13"
    #     last_exit:
    #       type: string
    #       example: "23:59"
    #     work_time:
    #       type: string
    #       example: "04:46"
    #     out_work_time:
    #       type: string
    #       example: "00:00"
    Pagination:
      type: object
      properties:
        current_page:
          type: integer
          example: 1
        per_page:
          type: integer
          example: 100
        total:
          type: integer
          example: 1
    UsersIds:
      type: object
      properties:
        external_id:
          type: string
          example: "1"
        users_id:
          type: integer
          example: 1
        last_updated:
          type: string
          example: "2020-12-01 17:23:04"
    SubdivisionIds:
      type: object
      properties:
        external_id:
          type: string
          example: "1"
        subdivisions_id:
          type: integer
          example: 1
    SubdivisionItem:
      type: object
      properties:
        created_at:
          type: string
          example: 2020-12-01
        external_id:
          type: string
        id:
          type: integer
          example: 1
        name:
          type: string
        parent_id:
          type: integer
        schedules_id:
          type: integer
          example: 1
        zones_id:
          type: array
          items:
            type: integer
            example: 1
    Success:
      required:
        - message
        - success
      type: object
      properties:
        message:
          type: string
          example: ""
        success:
          type: boolean
          example: true
    UserBase:
      required:
        - first_name
      type: object
      properties:
        blacklisted:
          type: boolean
          description: Пользователь в черном списке
          example: false
        blocked:
          type: boolean
          description: Блокировка пользователя
          example: false
        external_id:
          type: string
          description: ID записи интегрируемого сервиса (Облако, СКУД)
          example: "1"
        first_name:
          type: string
          description: Имя
          example: Ivan
        last_name:
          type: string
          description: Фамилия
          example: Ivanov
        middle_name:
          type: string
          description: Второе имя (отчество)
          example: Ivanovich
        phone:
          type: string
          description: Номер сотового телефона
          example: "79223410000"
        type_user:
          type: string
          description: Тип пользователя (admin, guard, employee, guest)
          example: employee
    Device:
      type: object
      properties:
        id:
          type: integer
          example: 14
        name:
          type: string
          example: "Device"
        ip_address:
          type: string
          example: "192.168.88.232"
        purpose:
          type: string
          example: "duplex"
        settings:
          $ref: "#/components/schemas/DeviceSetting"
        created_at:
          type: string
          example: "0001-01-01T00:00:00Z"
        updated_at:
          type: string
          example: "0001-01-01T00:00:00Z"
    DeviceSetting:
      type: object
      properties:
        control_mode:
          type: string
          example: "no"
        recognition_range:
          type: integer
          example: 2
        recognition_face:
          type: integer
          example: 0
        recognition_mask:
          type: integer
          example: 0
        mask_enabled:
          type: boolean
        temperature_enable:
          type: boolean
        system_mode:
          type: string
          example: "default"
        show_fullname:
          type: boolean
        show_access:
          type: boolean
        show_themp_info:
          type: boolean
        pass_timeout:
          type: integer

